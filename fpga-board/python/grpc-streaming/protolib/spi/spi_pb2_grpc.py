# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import protolib.spi.spi_pb2 as spi__pb2


class SPIStub(object):
    """/////////////////////////////////////////////////
    Define RPC Service              //         
    /////////////////////////////////////////////////
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ConfigureDACChannel0 = channel.unary_unary(
                '/spi.SPI/ConfigureDACChannel0',
                request_serializer=spi__pb2.ConfigureDACChannel0Packet.SerializeToString,
                response_deserializer=spi__pb2.ConfigureDACChannel0Response.FromString,
                )
        self.ConfigureDACChannel1 = channel.unary_unary(
                '/spi.SPI/ConfigureDACChannel1',
                request_serializer=spi__pb2.ConfigureDACChannel1Packet.SerializeToString,
                response_deserializer=spi__pb2.ConfigureDACChannel1Response.FromString,
                )
        self.ConfigureDACChannel2 = channel.unary_unary(
                '/spi.SPI/ConfigureDACChannel2',
                request_serializer=spi__pb2.ConfigureDACChannel2Packet.SerializeToString,
                response_deserializer=spi__pb2.ConfigureDACChannel2Response.FromString,
                )
        self.ReadADC = channel.unary_unary(
                '/spi.SPI/ReadADC',
                request_serializer=spi__pb2.ReadADCPacket.SerializeToString,
                response_deserializer=spi__pb2.ReadADCResponse.FromString,
                )


class SPIServicer(object):
    """/////////////////////////////////////////////////
    Define RPC Service              //         
    /////////////////////////////////////////////////
    """

    def ConfigureDACChannel0(self, request, context):
        """Configure DAC Channel 0
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureDACChannel1(self, request, context):
        """Configure DAC Channel 1
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureDACChannel2(self, request, context):
        """Configure DAC Channel 2
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadADC(self, request, context):
        """Read ADC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ConfigureDACChannel0': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureDACChannel0,
                    request_deserializer=spi__pb2.ConfigureDACChannel0Packet.FromString,
                    response_serializer=spi__pb2.ConfigureDACChannel0Response.SerializeToString,
            ),
            'ConfigureDACChannel1': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureDACChannel1,
                    request_deserializer=spi__pb2.ConfigureDACChannel1Packet.FromString,
                    response_serializer=spi__pb2.ConfigureDACChannel1Response.SerializeToString,
            ),
            'ConfigureDACChannel2': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureDACChannel2,
                    request_deserializer=spi__pb2.ConfigureDACChannel2Packet.FromString,
                    response_serializer=spi__pb2.ConfigureDACChannel2Response.SerializeToString,
            ),
            'ReadADC': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadADC,
                    request_deserializer=spi__pb2.ReadADCPacket.FromString,
                    response_serializer=spi__pb2.ReadADCResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'spi.SPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SPI(object):
    """/////////////////////////////////////////////////
    Define RPC Service              //         
    /////////////////////////////////////////////////
    """

    @staticmethod
    def ConfigureDACChannel0(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spi.SPI/ConfigureDACChannel0',
            spi__pb2.ConfigureDACChannel0Packet.SerializeToString,
            spi__pb2.ConfigureDACChannel0Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureDACChannel1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spi.SPI/ConfigureDACChannel1',
            spi__pb2.ConfigureDACChannel1Packet.SerializeToString,
            spi__pb2.ConfigureDACChannel1Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureDACChannel2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spi.SPI/ConfigureDACChannel2',
            spi__pb2.ConfigureDACChannel2Packet.SerializeToString,
            spi__pb2.ConfigureDACChannel2Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadADC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spi.SPI/ReadADC',
            spi__pb2.ReadADCPacket.SerializeToString,
            spi__pb2.ReadADCResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
